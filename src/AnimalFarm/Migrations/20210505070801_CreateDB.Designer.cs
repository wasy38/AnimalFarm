// <auto-generated />
using System;
using AnimalFarm.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnimalFarm.Migrations
{
    [DbContext(typeof(FarmContext))]
    [Migration("20210505070801_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnimalFarm.Models.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsMasculine")
                        .HasColumnType("bit");

                    b.Property<int?>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.AnimalPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lease")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("PlaceId");

                    b.ToTable("AnimalPlaces");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.AnimalPlaceProcess", b =>
                {
                    b.Property<int?>("AnimalPlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("AnimalPlaceId", "ProcessId");

                    b.HasIndex("ProcessId");

                    b.ToTable("AnimalPlaceProcesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool?>("IsWork")
                        .HasColumnType("bit");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.EmployeeProcess", b =>
                {
                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId", "ProcessId");

                    b.HasIndex("ProcessId");

                    b.ToTable("EmployeeProcesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.EquipmentProcess", b =>
                {
                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentId", "ProcessId");

                    b.HasIndex("ProcessId");

                    b.ToTable("EquipmentProcesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Feed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.FeedProcess", b =>
                {
                    b.Property<int?>("FeedId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedId", "ProcessId");

                    b.HasIndex("ProcessId");

                    b.ToTable("FeedProcesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Specieses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Animal", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Species", "Species")
                        .WithMany("Animals")
                        .HasForeignKey("SpeciesId");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.AnimalPlace", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Animal", "Animal")
                        .WithMany("AnimalPlaces")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalFarm.Models.Entities.Place", "Place")
                        .WithMany("AnimalPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.AnimalPlaceProcess", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Process", "Process")
                        .WithMany("AnimalPlaceProcesses")
                        .HasForeignKey("AnimalPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalFarm.Models.Entities.AnimalPlace", "AnimalPlace")
                        .WithMany("AnimalPlaceProcesses")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimalPlace");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Employee", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.EmployeeProcess", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Process", "Process")
                        .WithMany("EmployeePocesses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalFarm.Models.Entities.Employee", "Employee")
                        .WithMany("EmployeePocesses")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.EquipmentProcess", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Process", "Process")
                        .WithMany("EquipmentPocesses")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalFarm.Models.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentProcesses")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.FeedProcess", b =>
                {
                    b.HasOne("AnimalFarm.Models.Entities.Process", "Process")
                        .WithMany("FeedPocesses")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalFarm.Models.Entities.Feed", "Feed")
                        .WithMany("FeedPocesses")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Animal", b =>
                {
                    b.Navigation("AnimalPlaces");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.AnimalPlace", b =>
                {
                    b.Navigation("AnimalPlaceProcesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Employee", b =>
                {
                    b.Navigation("EmployeePocesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Equipment", b =>
                {
                    b.Navigation("EquipmentProcesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Feed", b =>
                {
                    b.Navigation("FeedPocesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Place", b =>
                {
                    b.Navigation("AnimalPlaces");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Process", b =>
                {
                    b.Navigation("AnimalPlaceProcesses");

                    b.Navigation("EmployeePocesses");

                    b.Navigation("EquipmentPocesses");

                    b.Navigation("FeedPocesses");
                });

            modelBuilder.Entity("AnimalFarm.Models.Entities.Species", b =>
                {
                    b.Navigation("Animals");
                });
#pragma warning restore 612, 618
        }
    }
}
